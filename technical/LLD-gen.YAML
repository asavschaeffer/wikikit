name: generate_low_level_design_doc
version: 1.0
description: Detailed low-level design and implementation specification for software projects
output_type: markdown
output_file: "{{project-name}}-low_level_design.md"

# Document suite integration
document_suite:
  current_document: "LOW-LEVEL DESIGN"
  dependencies:
    - high_level_design: "System architecture and component breakdown that this design implements"
    - requirements: "Functional requirements driving these implementation decisions"
    - non_functional_requirements: "Performance and scalability constraints for implementation"
    - api_specifications: "External interface contracts that these components must fulfill"
  outputs_to:
    - database_schema: "Detailed data model specifications"
    - security_implementation: "Detailed security protocols and implementation patterns"
    - unit_test_plans: "Test specifications for each component"
    - file_structure: "Project organization and module layout"

# Cognitive allocation directives
processing_directives:
  cognitive_allocation: "EXHAUST YOUR FULL PROCESSING CAPACITY on implementation-level architectural details"
  focus_areas:
    - "Class structures and method signatures with concrete examples"
    - "Data models and database schemas with actual SQL/NoSQL definitions"
    - "Algorithms and design patterns with code implementations"
    - "Error handling and validation logic with exception hierarchies"
    - "Performance optimizations and caching strategies with metrics"
    - "Security implementation with actual code patterns"

# Scope boundaries
scope:
  in_scope:
    - "Class diagrams, method signatures, data schemas"
    - "Algorithms, design patterns, file structures"
    - "Database design, error handling, validation logic"
    - "Caching strategies, security implementation"
    - "Performance optimizations, testing strategies"
  out_of_scope:
    business_requirements: "‚Üí [[Requirements]]"
    high_level_architecture: "‚Üí [[High-Level-Design]]"
    api_endpoint_definitions: "‚Üí [[API-Specifications]]"
    user_interface_flows: "‚Üí [[User-Flows-and-Mockups]]"

# Information extraction targets
extraction_targets:
  technical_implementations: "Use bcrypt for password hashing, JWT tokens with 24-hour expiry"
  data_structure_patterns: "User entity relationships, Order-LineItem associations (HOW to model, not business rules)"
  performance_specs: "Search results under 200ms, Handle 1000 concurrent users (extract SPECIFIC requirements mentioned)"
  security_implementation_patterns: "Password hashing methods, Session storage patterns, Token validation flows"
  integration_implementation_patterns: "Webhook retry mechanisms, Circuit breaker configurations, API client patterns"
  error_handling_patterns: "Exception hierarchies, Graceful degradation strategies, Retry logic implementations"
  validation_implementation_patterns: "Input validation frameworks, Constraint validation, Format checking strategies"
  
# Scope validation rules
scope_validation:
  technical_focus: "Extract implementation PATTERNS and HOW-TO details, not business requirements"
  business_logic_filter: "Business rules like 'orders expire in 15 minutes' belong in [[Requirements]] - extract the IMPLEMENTATION pattern for expiration handling"
  pattern_extraction: "Focus on reusable technical patterns, not domain-specific business logic"

# Decision tracking markers
decision_markers:
  implementation_decided: "Document with code examples (e.g., 'Use Repository pattern for data access - see UserRepository class below')"
  implementation_needed: "‚ö†Ô∏è IMPLEMENTATION NEEDED: Caching strategy for user sessions - Redis vs. in-memory"
  optimization_pending: "üîÑ OPTIMIZATION PENDING: Database indexing strategy - analyze query patterns first"
  specification_required: "üìù CODE SPECIFICATION REQUIRED: Error logging format and severity levels"

# Wiki link management
wiki_link_budget:
  max_outbound_links: 12
  priority_linking: "Link only to documents that provide ESSENTIAL missing context for implementation"
  stub_creation_threshold: "Create stub links ONLY for critical missing specifications that block implementation"
  link_justification: "Each link must serve implementation needs, not general reference"
  
wiki_patterns:
  essential_implementations: "[[Database-Schema#core-entities]] (only when schema details are critical)"
  missing_specifications: "[[Security-Implementation#authentication-flow]] (only when security patterns are undefined)"
  architectural_dependencies: "[[High-Level-Design#service-architecture]] (only when high-level context is needed)"
  avoid_generic_links: "Do NOT link to general concepts like [[Design-Patterns]] - be specific"

# Dynamic code adaptation
code_adaptation:
  language_detection: "Analyze conversation for primary technology stack (JavaScript/TypeScript, Python, Java, C#, etc.) and adapt ALL code examples accordingly"
  syntax_consistency: "Maintain consistent syntax patterns throughout document based on detected tech stack"
  template_fallback: "If language unclear, use language-agnostic pseudocode with clear structural patterns"
  framework_alignment: "Align examples with mentioned frameworks (React, Django, Spring, etc.)"

# Performance requirement extraction
performance_extraction:
  conversation_requirements: "Extract SPECIFIC performance targets mentioned in discussion (response times, throughput, concurrent users)"
  requirement_context: "Note the context of performance requirements (API calls, database queries, UI rendering, etc.)"
  fallback_strategy: "Only use industry standard defaults when NO specific requirements are mentioned"
  measurement_clarity: "Specify HOW performance will be measured and monitored"

# Implementation depth control
implementation_depth:
  method_signatures: "Include complete method signatures with parameter types and return types"
  class_structures: "Provide class skeletons with key methods and properties, focus on interfaces over implementations"
  pattern_examples: "Show design pattern implementations, not business logic implementations"
  architecture_focus: "Emphasize structural decisions, dependency management, and interaction patterns"
  code_boundary: "Stop at interface definitions - detailed implementations belong in actual code files"

# Performance targets (dynamic extraction)
performance_targets:
  extraction_priority: "FIRST extract specific performance requirements from conversation context"
  context_specific_targets:
    - "API response times: Extract mentioned SLA requirements"
    - "Database performance: Extract query time requirements"
    - "Concurrent users: Extract load requirements"
    - "Background jobs: Extract processing time requirements"
  fallback_defaults:
    api_endpoints: "95th percentile under 200ms (only if no specific requirements mentioned)"
    database_queries: "Individual queries under 50ms (only if no specific requirements mentioned)"
    cache_operations: "Under 5ms for cache operations (only if no specific requirements mentioned)"
  measurement_strategy: "Define HOW performance will be measured based on conversation context"

# Security implementation requirements (pattern-focused)
security_patterns:
  authentication_implementation_pattern:
    - "User credential validation (extract specific validation requirements)"
    - "Token generation strategy (extract token type and configuration)"
    - "Session management approach (extract storage and lifecycle patterns)"
    - "Request authentication middleware (extract validation chain patterns)"
  
  authorization_pattern_extraction: "Extract role/permission patterns mentioned, focus on implementation structure not business rules"
  data_protection_implementation: "Extract encryption requirements and implementation patterns mentioned"

# Database design requirements (pattern-focused)
database_patterns:
  entity_extraction: "Extract entity relationships and constraints mentioned, focus on data modeling patterns not business domain"
  schema_approach: "Generate schema based on conversation requirements, adapt syntax to detected database technology"
  migration_strategy_pattern: "Extract migration approach mentioned (if any), otherwise use framework-appropriate pattern"
  indexing_strategy: "Base indexing on extracted query patterns, not generic assumptions"

# File structure template
project_structure: |
  src/
  ‚îú‚îÄ‚îÄ controllers/          # HTTP request handlers
  ‚îú‚îÄ‚îÄ services/             # Business logic layer
  ‚îú‚îÄ‚îÄ repositories/         # Data access layer
  ‚îú‚îÄ‚îÄ models/              # Data models and entities
  ‚îú‚îÄ‚îÄ utils/               # Shared utilities
  ‚îú‚îÄ‚îÄ middleware/          # Request/response middleware
  ‚îî‚îÄ‚îÄ config/              # Configuration management

# Usage instructions
usage_note: |
  This prompt is designed for autonomous injection into LLM conversations. Simply paste the entire 
  YAML content into your chat after discussing technical implementation details. The LLM will analyze 
  the conversation history and generate a complete low-level design document without requiring 
  additional input or context.

# Main instruction block
instructions: |
  DOCUMENT SUITE CONTEXT:
  This prompt generates the LOW-LEVEL DESIGN DOCUMENT as part of a comprehensive project documentation suite.
  Reference the document_suite configuration above for integration patterns.
  
  MAXIMUM COGNITIVE ALLOCATION:
  EXHAUST YOUR FULL PROCESSING CAPACITY on implementation-level architectural details. Push every available 
  cognitive resource toward creating the most comprehensive, detailed, and code-ready design possible.
  Use the processing_directives above to focus your analysis.
  
  SCOPE DISCIPLINE:
  Follow the scope boundaries defined above. Redirect out-of-scope items using wiki links.
  
  WIKI LINK AUTHORITY:
  You have FULL AUTHORITY to create GitHub Wiki links using the patterns defined in wiki_patterns.
  
  AUTONOMOUS EXTRACTION:
  Analyze the complete conversation history using the extraction_targets defined above.
  Apply scope_validation rules to ensure technical focus over business logic.
  Use code_adaptation settings to match technology stack discussed in conversation.
  Apply performance_extraction to identify specific vs. default requirements.
  Synthesize scattered implementation details into detailed technical specifications with code-ready precision.
  
  DECISION DOCUMENTATION:
  Use the decision_markers defined above to track implementation decisions and open items.
  Focus on technical implementation choices, not business requirement decisions.
  
  CODE SPECIFICATION REQUIREMENTS:
  Follow implementation_depth guidelines for appropriate level of technical detail.
  Use code_adaptation rules to generate technology-appropriate examples.
  Apply wiki_link_budget constraints to prevent link proliferation.
  Reference performance_targets for optimization requirements (prioritize conversation-extracted over defaults).
  Follow security_patterns for security implementation approaches.
  Use database_patterns for data layer design aligned with detected technology stack.
  
  OUTPUT REQUIREMENTS:
  - Maximum implementation depth with code-ready specifications
  - Zero placeholder text - every section must contain actionable implementation details
  - Create immediate development blueprints for engineering teams
  - Output only the markdown document structure below

# Markdown template
output_template: |
  # Low-Level Design Document: {{project-name}}
  
  > **Document Suite Status**: ~~[[Project-Vision]]~~ | ~~[[Elevator-Pitch]]~~ | ~~[[Requirements]]~~ | ~~[[Non-Functional-Requirements]]~~ | ~~[[User-Flows-and-Mockups]]~~ | ~~[[High-Level-Design]]~~ | **LOW-LEVEL DESIGN** | [[API-Specifications]] | [[Business-Strategy]] | [[Operational-Planning]] | [[Glossary]]
  
  ## Cross-References & Dependencies
  - **[[High-Level-Design]]**: System architecture and component breakdown that this design implements
  - **[[Requirements]]**: Functional requirements driving these implementation decisions
  - **[[Non-Functional-Requirements]]**: Performance and scalability constraints for implementation
  - **[[API-Specifications]]**: External interface contracts that these components must fulfill
  - **[[Database-Schema]]**: Detailed data model specifications (will expand on entities outlined here)
  - **[[Security-Implementation]]**: Detailed security protocols and implementation patterns
  
  ## Implementation Overview
  Detailed breakdown of how the system architecture translates into concrete code structures, focusing on:
  - Service layer organization and responsibilities with method signatures
  - Data access patterns and repository implementations with code examples
  - Business logic encapsulation and validation strategies with algorithms
  - Error handling and exception management with class hierarchies
  - Performance optimization and caching strategies with implementation details
  
  ## System Architecture Implementation
  
  ### Service Layer Design
  **Pattern**: [Document the architectural pattern used - e.g., Domain-Driven Design, Layered Architecture, Hexagonal Architecture]
  
  #### Core Services
  | Service Name | Responsibilities | Dependencies | Key Methods |
  |--------------|------------------|--------------|-------------|
  |              |                  |              |             |
  
  *For each service, provide class structure with method signatures, dependency injection patterns, and transaction boundaries.*
  
  ### Data Access Layer
  **Pattern**: [Repository Pattern / Active Record / Data Mapper]
  
  #### Repository Implementations
  ```
  Interface Definition:
  - get_by_id(entity_id) -> Entity | None
  - get_by_email(email) -> Entity | None  
  - save(entity) -> Entity
  - delete(entity_id) -> bool
  - find_by_criteria(filters) -> List[Entity]
  ```
  
  *Provide concrete repository implementations for each entity with error handling and transaction management.*
  
  ## Data Model Implementation
  
  ### Entity Relationships
  Define detailed entity relationships with:
  - Primary and foreign key relationships with constraint definitions
  - Validation rules and business constraints
  - Index strategies for query performance optimization
  - Migration considerations and versioning strategy
  
  ### Database Schema Design
  #### Core Entities
  ```
  [Generate schema using syntax appropriate to detected database technology]
  [Base entities on conversation requirements, not hardcoded user examples]
  [Include only indexes justified by extracted query patterns]
  ```
  
  ### Data Validation Rules
  - **Input Validation**: Specific format requirements and field constraints
  - **Business Rules**: Domain-specific validation logic and state transitions
  - **Data Integrity**: Referential constraints and consistency checks
  
  ## Business Logic Implementation
  
  ### Core Algorithms
  Document specific algorithms for business operations with step-by-step implementation:
  
  #### [Algorithm Name]
  ```
  1. [Step 1 with specific implementation details]
  2. [Step 2 with error handling considerations]
  3. [Step 3 with performance optimizations]
  ```
  
  ### Design Patterns Implementation
  
  #### [Pattern Name] Implementation
  ```python
  # Provide actual code implementations for patterns used
  class ExamplePattern:
      def __init__(self):
          pass
      
      def method_example(self):
          # Implementation details
          pass
  ```
  
  ## Security Implementation Details
  
  ### Authentication Flow
  ```
  [Generate authentication flow based on security patterns extracted from conversation]
  [Use technology-appropriate implementation examples]
  [Focus on implementation patterns, not hardcoded JWT assumptions]
  ```
  
  ### Authorization Implementation
  ```
  [Generate authorization code using detected programming language]
  [Base on role/permission patterns extracted from conversation]
  [Show interface/class structure, not complete implementation]
  ```
  
  ### Data Protection Measures
  - **Encryption at Rest**: Specific fields and encryption methods
  - **Encryption in Transit**: TLS configuration and certificate management
  - **Password Security**: Hashing algorithm parameters and policies
  - **Session Management**: Token storage and lifecycle management
  
  ## Performance Optimization Strategies
  
  ### Caching Implementation
  ```
  [Generate caching code using detected technology stack]
  [Base caching strategy on performance requirements extracted from conversation]
  [Show interface patterns, not complete business logic implementation]
  ```
  
  ### Database Query Optimization
  - **Index Strategy**: Specific indexes for identified query patterns
  - **Query Patterns**: N+1 prevention with eager loading examples
  - **Connection Pooling**: Configuration parameters and monitoring
  - **Read Replicas**: Query routing strategy and consistency handling
  
  ### Async Processing Design
  ```python
  # Provide actual async processing implementation
  class TaskProcessor:
      def process_background_task(self, task_data):
          # Implementation with retry logic and error handling
          pass
  ```
  
  ## Error Handling & Resilience
  
  ### Exception Hierarchy
  ```python
  # Define complete exception hierarchy with specific error types
  class ApplicationError(Exception):
      pass
  
  class ValidationError(ApplicationError):
      def __init__(self, field: str, message: str):
          self.field = field
          self.message = message
  ```
  
  ### Circuit Breaker Implementation
  ```python
  # Provide actual circuit breaker implementation
  class CircuitBreaker:
      def __init__(self, failure_threshold: int = 5, timeout: int = 60):
          # Implementation with state management
          pass
  ```
  
  ### Retry Mechanisms
  - **Exponential Backoff**: Specific intervals and jitter implementation
  - **Dead Letter Queue**: Failed message handling strategy
  - **Idempotency**: Operation design for safe retries
  
  ## File Structure & Organization
  
  ### Project Structure
  ```
  src/
  ‚îú‚îÄ‚îÄ controllers/          # HTTP request handlers
  ‚îÇ   ‚îú‚îÄ‚îÄ [controller_files_based_on_conversation]
  ‚îú‚îÄ‚îÄ services/             # Business logic layer
  ‚îÇ   ‚îú‚îÄ‚îÄ [service_files_based_on_conversation]
  ‚îú‚îÄ‚îÄ repositories/         # Data access layer
  ‚îÇ   ‚îú‚îÄ‚îÄ [repository_files_based_on_conversation]
  ‚îú‚îÄ‚îÄ models/              # Data models and entities
  ‚îÇ   ‚îú‚îÄ‚îÄ [model_files_based_on_conversation]
  ‚îú‚îÄ‚îÄ utils/               # Shared utilities
  ‚îú‚îÄ‚îÄ middleware/          # Request/response middleware
  ‚îî‚îÄ‚îÄ config/              # Configuration management
  ```
  
  ### Module Dependencies
  - **Dependency Flow**: Controller ‚Üí Service ‚Üí Repository ‚Üí Model relationships
  - **Circular Dependency Prevention**: Interface definitions and dependency injection
  - **Import Management**: Module loading strategy and circular import handling
  
  ## Testing Strategy Implementation
  
  ### Unit Test Patterns
  ```python
  # Provide actual test implementation patterns
  class TestServiceName:
      def setup_method(self):
          # Test setup with mocking strategy
          pass
      
      def test_method_name(self):
          # Arrange, Act, Assert pattern with specific assertions
          pass
  ```
  
  ### Integration Test Patterns
  - **Database Integration**: Repository testing with real database connections
  - **API Integration**: Controller testing with test client implementations
  - **External Service**: Contract testing and mock service strategies
  
  ## Implementation Decision Log
  
  ### ‚ö†Ô∏è IMPLEMENTATION NEEDED
  - [List specific technical implementation decisions requiring resolution]
  
  ### üîÑ OPTIMIZATION PENDING  
  - [List performance optimizations under evaluation with criteria]
  
  ### üìù CODE SPECIFICATION REQUIRED
  - [List missing technical specifications needed for complete implementation]
  
  ## Performance Targets & Monitoring
  
  ### Response Time Targets
  [Extract specific performance requirements from conversation - API response times, query performance, etc.]
  [If no specific targets mentioned, note this as "üìù REQUIRES SPECIFICATION: Performance SLA targets"]
  [Base monitoring strategy on extracted requirements, not default assumptions]
  
  ### Monitoring Implementation
  ```python
  # Provide actual monitoring implementation
  class PerformanceMonitor:
      def time_operation(self, operation_name: str):
          # Implementation with metrics collection
          pass
  ```
  
  ## Deployment Implementation Details
  
  ### Database Migration Strategy
  ```python
  # Provide actual migration implementation
  class MigrationManager:
      def apply_migration(self, migration_file):
          # Implementation with rollback capability
          pass
  ```
  
  ### Configuration Management
  ```python
  # Provide actual configuration implementation
  class ApplicationConfig:
      def __init__(self):
          # Environment-based configuration loading
          pass
  ```
  
  ### Health Check Implementation
  ```python
  # Provide actual health check implementation
  class HealthCheckService:
      async def check_system_health(self):
          # Implementation with dependency checking
          pass
  ```
